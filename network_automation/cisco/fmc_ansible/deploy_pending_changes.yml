- hosts: wa-fmc2500
  connection: httpapi
  tasks:
    - name: Get Domain
      cisco.fmcansible.fmc_configuration:
        operation: getAllDomain
        register_as: domain

    - name: Get Deployable Devices
      cisco.fmcansible.fmc_configuration:
        operation: getDeployableDevice
        path_params:
          domainUUID: '{{ domain[0].uuid }}'
        query_params:
          expanded: true
        register_as: devices


    # - debug:
    #     var: devices

    - debug:
        msg: "{{ item.device.name }}"
      loop: "{{ devices }}"
      loop_control: 
        label: "{{ item.device.name }}"
        pause: 0.5
      when: item.device.name == "WA-LAB-FTD-HA"

    - name: Complete playbook when nothing to deploy
      meta: end_play
      when: devices[0].device is undefined

    - name: Fetch pending changes
      cisco.fmcansible.fmc_configuration:
        operation: getPendingChanges
        path_params:
          containerUUID: '{{ item.device.id }}'
          domainUUID: '{{ domain[0].uuid }}'
        register_as: pending_changes
      loop: "{{ devices }}"
      loop_control: 
        label: "{{ item.device.name }}: {{ item.device.id }}"
        pause: 0.5
      when: item.device.name == "WA-LAB-FTD-HA"

    

    - debug:
        var: pending_changes

    - name: Start deployment
      cisco.fmcansible.fmc_configuration:
        operation: createDeploymentRequest
        data:
          version: '{{ item.version }}'
          deviceList:
            - '{{ item.device.id }}'
          forceDeploy: True
        path_params:
          domainUUID: '{{ domain[0].uuid }}'
        register_as: deployment_job
      loop: "{{ devices }}"
      loop_control: 
        label: "{{ item.device.name }}: {{ item.device.id }}"
        pause: 0.5
      when: item.device.name == "WA-LAB-FTD-HA"

    - name: Poll deployment status until the job is finished
      cisco.fmcansible.fmc_configuration:
        operation: getDeploymentDetail
        path_params:
          containerUUID: '{{ item.device.id }}'
          domainUUID: '{{ domain[0].uuid }}'
        register_as: deployment_status
      until: deployment_status[0].status is match("SUCCEEDED")
      retries: 100
      delay: 3
      loop: "{{ devices }}"
      loop_control: 
        label: "{{ item.device.name }}: {{ item.device.id }}"
        pause: 0.5
      when: item.device.name == "WA-LAB-FTD-HA"


    - name: Stop the playbook if the deployment failed
      fail:
        msg: 'Deployment failed. Status: {{ deployment_status[0].status }}'
      when: deployment_status[0].status is not match("SUCCEEDED")
