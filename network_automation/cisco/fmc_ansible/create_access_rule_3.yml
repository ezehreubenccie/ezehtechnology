- hosts: wa-fmc2500
  connection: httpapi
  tasks:
    - name: Get Domain UUID
      cisco.fmcansible.fmc_configuration:
        operation: getAllDomain
        register_as: domain

    - debug:
        var: domain

    # - name: Get Access Policy
    #   cisco.fmcansible.fmc_configuration:
    #     operation: getAllAccessPolicy
    #     path_params: 
    #       domainUUID: "{{ domain[0].uuid }}"
    #     query_params:
    #       name: "TEST"
    #       # filter: "nameOrValue:TEST"
    #       offset: "{{ offset }}"
    #       limit: "{{ limit }}"
    #       expanded: "{{ expanded }}"
    #     register_as: access_policy

    # - debug:
    #     var: access_policy[0].id




    - name: Execute 'getAllSecurityZoneObject' operation
      cisco.fmcansible.fmc_configuration:
        operation: "getAllSecurityZoneObject"
        path_params:
          domainUUID: "{{ domain[0].uuid }}"
        query_params:
          offset: "{{ offset }}"
          limit: "{{ limit }}"
          expanded: "{{ expanded }}"
        register_as: sec_zne


    # - debug:
    #     var: sec_zne


    # - name: Extract Source Zone
    #   set_fact:
    #     sz_name: "{{ item.name }}"
    #     sz_id: "{{item.id}}"
    #   when: "src_zone == item.name"
    #   loop: "{{ sec_zne }}"
    #   loop_control: 
    #     label: "{{ item.name }}"
    #     pause: 1

    # - debug:
    #     msg:
    #       - "{{ sz_name }}"
    #       - "{{ sz_id }}"


    # - name: Extract Destination Zone
    #   set_fact:
    #     dz_name: "{{ item.name }}"
    #     dz_id: "{{item.id}}"
    #   when: "dest_zone == item.name"
    #   loop: "{{ sec_zne }}"
    #   loop_control: 
    #     label: "{{ item.name }}"
    #     pause: 0.5

    # - debug:
    #     msg:
    #       - "{{ dz_name }}"
    #       - "{{ dz_id }}"

    - name: Execute 'getAllNetworkGroup' operation
      cisco.fmcansible.fmc_configuration:
        operation: "getAllNetworkGroup"
        path_params:
          domainUUID: "{{ domain[0].uuid }}"
        query_params:
          filter: "nameOrValue:{{ src_nets }}"
          offset: "{{ offset }}"
          limit: "{{ limit }}"
          expanded: "{{ expanded }}"
        register_as: src_netog

    # - debug:
    #     var: src_netog

    # - name: Extract Source Network
    #   set_fact:
    #     src_netog_id: "{{ src_netog[0].id }}"
    #     src_netog_name: "{{ src_nets }}"

    # - debug:
    #     msg:
    #       - "{{ src_netog_id }}"
    #       - "{{ src_netog_name }}"


    # - name: Execute 'getAllNetworkGroup' operation
    #   cisco.fmcansible.fmc_configuration:
    #     operation: "getAllNetworkGroup"
    #     path_params:
    #       domainUUID: "{{ domain[0].uuid }}"
    #     query_params:
    #       filter: "nameOrValue:{{ elk_dest_nets }}"
    #       offset: "{{ offset }}"
    #       limit: "{{ limit }}"
    #       expanded: "{{ expanded }}"
    #     register_as: elk_netog

    # - name: Execute 'getAllProtocolPortObject' operation
    #   cisco.fmcansible.fmc_configuration:
    #     operation: "getAllPortObjectGroup"
    #     path_params:
    #       domainUUID: "{{ domain[0].uuid }}"
    #     query_params:
    #       filter: "nameOrValue:{{ elk_dest_port }}"
    #     register_as: elk_portog

    # - debug:
    #     var: elk_netog

    # - debug:
    #     var: elk_portog
    

    # - name: Extract ELK Network ID
    #   set_fact:
    #     elk_netog_id: "{{ elk_netog[0].id }}"
    #     elk_netog_name: "{{ elk_dest_nets }}"
    #     elk_portog_id: "{{ elk_portog[0].id }}"
    #     elk_portog_name: "{{ elk_dest_port }}"

    # - debug:
    #     msg:
    #       - "{{ elk_netog_id }}"
    #       - "{{ elk_netog_name }}"
    #       - "{{ elk_portog_id }}"
    #       - "{{ elk_portog_name }}"

    
    # - name: Execute 'getAllNetworkGroup' operation
    #   cisco.fmcansible.fmc_configuration:
    #     operation: "getAllNetworkGroup"
    #     path_params:
    #       domainUUID: "{{ domain[0].uuid }}"
    #     query_params:
    #       filter: "nameOrValue:{{ http_dest_nets_1 }}"
    #       offset: "{{ offset }}"
    #       limit: "{{ limit }}"
    #       expanded: "{{ expanded }}"
    #     register_as: http1_netog


    # - name: Execute 'getAllNetworkGroup' operation
    #   cisco.fmcansible.fmc_configuration:
    #     operation: "getAllNetworkGroup"
    #     path_params:
    #       domainUUID: "{{ domain[0].uuid }}"
    #     query_params:
    #       filter: "nameOrValue:{{ http_dest_nets_2 }}"
    #       offset: "{{ offset }}"
    #       limit: "{{ limit }}"
    #       expanded: "{{ expanded }}"
    #     register_as: http2_netog

    # - name: Execute 'getAllPortObjectGroup' operation
    #   cisco.fmcansible.fmc_configuration:
    #     operation: "getAllPortObjectGroup"
    #     path_params:
    #       domainUUID: "{{ domain[0].uuid }}"
    #     query_params:
    #       filter: "nameOrValue:{{ http_dest_port }}"
    #     register_as: http_portog

    # - debug:
    #     var: http1_netog

    # - debug:
    #     var: http2_netog

    # - debug:
    #     var: http_portog

    # - name: Extract HTTP Network AND PORT ID
    #   set_fact:
    #     http1_netog_id: "{{ http1_netog[0].id }}"
    #     http1_netog_name: "{{ http_dest_nets_1 }}"
    #     http2_netog_id: "{{ http2_netog[0].id }}"
    #     http2_netog_name: "{{ http_dest_nets_2 }}"
    #     http_portog_id: "{{ http_portog[0].id }}"
    #     http_portog_name: "{{ http_dest_port }}"

    # - debug:
    #     msg:
    #       - "{{ http1_netog_id }}"
    #       - "{{ http1_netog_name }}"
    #       - "{{ http2_netog_id }}"
    #       - "{{ http2_netog_name }}"
    #       - "{{ http_portog_id }}"
    #       - "{{ http_portog_name }}"

    
    # - name: Execute 'getAllNetworkGroup' operation
    #   cisco.fmcansible.fmc_configuration:
    #     operation: "getAllNetworkGroup"
    #     path_params:
    #       domainUUID: "{{ domain[0].uuid }}"
    #     query_params:
    #       filter: "nameOrValue:{{ dns_dest_nets }}"
    #       offset: "{{ offset }}"
    #       limit: "{{ limit }}"
    #       expanded: "{{ expanded }}"
    #     register_as: dns_netog

    # - name: Execute 'getAllProtocolPortObject' operation
    #   cisco.fmcansible.fmc_configuration:
    #     operation: "getAllPortObjectGroup"
    #     path_params:
    #       domainUUID: "{{ domain[0].uuid }}"
    #     query_params:
    #       filter: "nameOrValue:{{ dns_dest_port_tcp }}"
    #     register_as: dns_tcp_portog

    # - name: Execute 'getAllProtocolPortObject' operation
    #   cisco.fmcansible.fmc_configuration:
    #     operation: "getAllPortObjectGroup"
    #     path_params:
    #       domainUUID: "{{ domain[0].uuid }}"
    #     query_params:
    #       filter: "nameOrValue:{{ dns_dest_port_udp }}"
    #     register_as: dns_udp_portog

    # - debug:
    #     var: dns_netog
    
    # - debug:
    #     var: dns_tcp_portog

    # - debug:
    #     var: dns_udp_portog

    # - name: Extract DNS NET AND PORT ID
    #   set_fact:
    #     dns_netog_id: "{{ dns_netog[0].id }}"
    #     dns_netog_name: "{{ dns_dest_nets }}"
    #     dns_tcp_portog_id: "{{ dns_tcp_portog[0].id }}"
    #     dns_tcp_portog_name: "{{ dns_dest_port_tcp }}"
    #     dns_udp_portog_id: "{{ dns_udp_portog[0].id }}"
    #     dns_udp_portog_name: "{{ dns_dest_port_udp }}"

    # - debug:
    #     msg:
    #       - "{{ dns_netog_id }}"
    #       - "{{ dns_netog_name }}"
    #       - "{{ dns_tcp_portog_id }}"
    #       - "{{ dns_tcp_portog_name }}"
    #       - "{{ dns_udp_portog_id }}"
    #       - "{{ dns_udp_portog_name }}"

    
    - name: Execute 'getAllNetworkGroup' operation
      cisco.fmcansible.fmc_configuration:
        operation: "getAllNetworkGroup"
        path_params:
          domainUUID: "{{ domain[0].uuid }}"
        query_params:
          filter: "nameOrValue:{{ ldap_dest_nets }}"
          offset: "{{ offset }}"
          limit: "{{ limit }}"
          expanded: "{{ expanded }}"
        register_as: ldap_netog

    - name: Execute 'getAllProtocolPortObject' operation
      cisco.fmcansible.fmc_configuration:
        operation: "getAllPortObjectGroup"
        path_params:
          domainUUID: "{{ domain[0].uuid }}"
        query_params:
          filter: "nameOrValue:{{ ldap_dest_port }}"
        register_as: ldap_portog


    - debug:
        var: ldap_netog
    
    - debug:
        var: ldap_portog

    - name: Extract LDAP NET AND PORT ID
      set_fact:
        ldap_netog_id: "{{ ldap_netog[0].id }}"
        ldap_netog_name: "{{ ldap_dest_nets }}"
        ldap_portog_id: "{{ ldap_portog[0].id }}"
        ldap_portog_name: "{{ ldap_dest_port }}"


    - debug:
        msg:
          - "{{ ldap_netog_id }}"
          - "{{ ldap_netog_name }}"
          - "{{ ldap_portog_id }}"
          - "{{ ldap_portog_name }}"
    

        














    # - name: Execute 'getAllProtocolPortObject' operation
    #   cisco.fmcansible.fmc_configuration:
    #     operation: "getPortObject"
    #     path_params:
    #       domainUUID: "{{ domain[0].uuid }}"
    #     query_params:
    #       filter: "nameOrValue:{{ item }}"


    # - name: Execute 'getAllPortObjectGroup' operation
    #   cisco.fmcansible.fmc_configuration:
    #     operation: "getAllPortObjectGroup"
    #     path_params:
    #       domainUUID: "{{ domain[0].uuid }}"
    #     query_params:
    #       #filter: "{{ filter }}"
    #       offset: "{{ offset }}"
    #       limit: "{{ limit }}"
    #       expanded: "{{ expanded }}"
    #     register_as: portobjgrp


    # - name: Get ELK port group
    #   set_fact:
    #     elk_port_grp_name: "{{ portobjgrp.name }}"   
    #     elk_port_grp_id: "{{ portobjgrp.id }}"
    #   when: "Waltham-ELK-Ports == portobjgrp.name"


    # - debug:
    #     msg:
    #       - "{{elk_port_grp_name}}"
    #       - "{{elk_port_grp_id}}"
   
 
        







    # - name: Execute 'createMultipleAccessRule' operation
    #   cisco.fmcansible.fmc_configuration:
    #     operation: "createMultipleAccessRule"
    #     data:
    #       action: ALLOW
    #       enabled: True
    #       type: AccessRule
    #       name: "{{ item.rule_name }}"
    #       sendEventsToFMC: True
    #       logFiles: False
    #       logBegin: True
    #       logEnd: True
    #       #variableSet: {'name': 'FTD-IPS', 'id': 'VariableSetUUID', 'type': 'VariableSet'}
    #       #vlanTags: {'objects': [{'type': 'VlanTag', 'name': 'vlan_tag_1', 'id': 'VlanTagUUID1'}, {'type': 'VlanTag', 'name': 'vlan_tag_2', 'id': 'VlanTagUUID2'}]}
    #       #urls: {'urlCategoriesWithReputation': [{'type': 'UrlCategoryAndReputation', 'category': {'name': 'Weapons', 'id': 'URLCategoryUUID', 'type': 'URLCategory'}, 'reputation': 'BENIGN_SITES_WITH_SECURITY_RISKS'}]}
    #       sourceZones: {'objects': [{'name': '{{ item.src_zone }}', 'id': '{{ securityzone_id}}', 'type': 'SecurityZone'}]}
    #       destinationZones: {'objects': [{"name": "{{ item.dest_zone}}", "id": "{{ inside_seczone_id }}", "type": "SecurityZone"}]}
    #       #sourcePorts: {'objects': [{'type': 'PortObjectGroup', 'name': 'Waltham-LDAP-Ports', 'id': 'ProtocolPortObjectUUID'}]}
    #       sourceDynamicObjects: {}
    #       sourceNetworks: {'objects': [{"name": "{{ item.src_nets }}", "id": "{{ netog.id}}", "type": "NetworkGroup"}]}
    #       destinationNetworks: {'objects': [{"name": "{{ item.dest_nets }}", "id": "{{ netog.id}}", "type": "NetworkGroup"}]}
    #       destinationDynamicObjects: {}
    #       destinationPorts: {'objects': [{"type": "PortObjectGroup", "name": "Waltham-LDAP-Ports", 'id': '40CE2481-5D56-0ed3-0000-292057865381'}]}
    #       #ipsPolicy: {'type': 'IntrusionPolicy', 'id': 'ipsPolicyUuid', 'name': 'ipsPlicyName'}
    #       #filePolicy: {'type': 'FilePolicy', 'id': 'filePolicyUuid', 'name': 'filePolicyName'}
    #       #snmpConfig: {'id': 'snmpConfigUuid', 'name': 'snmp_alert1', 'type': 'SNMPAlert'}
    #       #syslogConfig: {'id': 'syslogConfigUuid', 'name': 'syslog_alert1', 'type': 'SyslogAlert'}
    #       #newComments: ['comment1', 'comment2']
    #     path_params:
    #       containerUUID: access_policy[0].id
    #       domainUUID: "{{ domain[0].uuid }}"
    #     query_params:
    #       bulk: "{{ bulk }}"
    #       insertAfter: "{{ insert_after }}"
    #       insertBefore: "{{ insert_before }}"
    #       section: "{{ section }}"
    #       category: "{{ category }}"
    #   loop: "{{ rules }}"






















