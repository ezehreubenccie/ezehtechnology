- name: DELETE FILES THAT ARE NOT IN USE FROM CISCO ASA FIREWALL FLASH
  hosts: usapfirewalls labfirewalls  usapchcfirewall lbjtoazurefirewalls
  connection: network_cli
  gather_facts: false

  vars:
    target_system_image_file: 
    flash_num: 'disk0:'
    file_type_1: '.SPA'
    file_type_2: '.bin'
    empty_string: ''
    spacefree_before:
    spacefree_after:


  tasks:
    - name: asa facts
      asa_command:
        commands:
          - show run hostname
      register: asa_vars

    - name: Find ASA Firewall System File
      asa_command:
        commands:
          - show run boot system
      register: system_image_file

    - name: Find ASDM Image File
      asa_command:
        commands:
          - show run asdm | grep image
      register: asdm_config

    - debug:
        var: system_image_file.stdout_lines

    - set_fact:
        system_boot_file_1: "{{ system_image_file.stdout_lines[0][0].split()[-1].split(':/')[-1] }}"
        system_boot_file_2: "{{ system_image_file.stdout_lines[0][1].split()[-1].split(':/')[-1] }}"
        asdm_image_file: "{{ asdm_config.stdout_lines[0][0].split()[-1].split(':/')[-1] }}"

    - name: Print Out Files That Wont Be Deleted
      debug:
        msg:
          - "These files won't be deleted"
          - '1. {{ system_boot_file_1 }}'
          - '2. {{ system_boot_file_2 }}'
          - '3. {{ asdm_image_file }}'


   # - set_fact:
       #system_boot_file_1: "{{ system_image_file.stdout_lines[0][0].split()[-1].split(':/')[-1] }}"
       #system_boot_file_2: "{{ system_image_file.stdout_lines[0][1].split()[-1].split(':/')[-1] }}"

    - name: Gather FLASH FACTS FOR ASA FIREWALL
      asa_command:
        commands:
          - 'dir {{ flash_num }}'
      register: flash_contents

    - name: asa facts
      asa_command:
        commands:
          - sh run snmp-server | grep location
      register: asa_location



    - debug:
        var: flash_contents.stdout_lines[0]

    - name: set fact 1
      set_fact:
        spacefree_before: "{{flash_contents.stdout_lines[0][-1].split()[3].replace('(', '')}}"

    - name: set fact 2
      set_fact:
        hostname: "{{ asa_vars['stdout'][0].split()[1] }}"

    - name: set fact 3
      set_fact:
        physicaladdress: "{{ asa_location.stdout_lines[0][0].split('snmp-server location ')[-1].replace(',','') }}"

    - name: DISPLAY FREE SPACE BEFORE DELETE
      debug:
        msg: "Free space is  {{ spacefree_before|float / 1000000000  }}GB for {{ hostname }} before delete task."
      tags: spacefree

#    - name: get free space before delete
#      set_fact:
#        spacefree_before: '{{ spacefree_before|float / 1000000000  }} GB'


   # - debug:
        #var: flash_contents.stdout_lines[0][1]

    - name: set fact 4
      set_fact:
        list1: "{{ flash_contents.stdout_lines[0][2:-3] }}"

    - debug:
        var: list1


    - name: DELETE FLASH FILES NOT IN USE 
      asa_command:
        commands: 
          - delete /noconfirm {{flash_num}}{{ item.split()[-1] }}
#        msg: " File to delete is  {{ item.split()[-1] }}"
      loop: '{{ list1 }}'
      when:
         - (file_type_1 in item.split()[-1]) or (file_type_2 in item.split()[-1])
         - 'item.split()[-1]  !=  system_boot_file_1'
         - 'item.split()[-1]  !=  system_boot_file_2'
         - 'item.split()[-1]  !=  asdm_image_file'
         #- 'item != empty_string'

    - name: Gather FLASH FACTS FOR ASA FIREWALL 
      asa_command:
        commands:
          - 'dir'
      register: flash_contents


  #  - debug:
    #    var: flash_contents.stdout_lines[0]

    - name: set fact 5
      set_fact:
        spacefree_after: "{{flash_contents.stdout_lines[0][-1].split()[3].replace('(', '')}}"


    - debug:
        msg: "Free space is  {{ spacefree_after|float / 1000000000 }}GB for {{ hostname }} after delete task. {{ spacefree_after|float / 1000000000 - spacefree_before|float / 1000000000 }}GB was recovered!."


#    - name: get free space after delete
#      set_fact:
#        spacefree_after: '{{ (spacefree_after|float / 1000000000) | round(2)  }} GB'


    - name: Amount Recovered!
      set_fact:
        space_recovered: "{{ (spacefree_after|float / 1000000000 - spacefree_before|float / 1000000000) | round(2) }} GB"
        spacefree_before_2: "{{ (spacefree_before|float / 1000000000) | round(2)  }} GB"
        spacefree_after_2: "{{ (spacefree_after|float / 1000000000) | round(2)  }} GB"
#        space_recovered_2: "{{ space_recovered | round(2) }} GB"

    - name: Write DiskCleanUpReport.csv
      run_once: true
      shell: echo Device Name,DiskSpacePreCleanUp,DiskSpacePostCleanUp,RecoveredSpace,Location  > DiskSpaceCleanUpReport.csv

    - name: Write Disk CleanUp CSV File
      shell: echo "{{ hostname }},{{ spacefree_before_2  }}, {{ spacefree_after_2  }},{{ space_recovered  }},{{ physicaladdress }}" >> DiskSpaceCleanUpReport.csv
      delegate_to: localhost

 
