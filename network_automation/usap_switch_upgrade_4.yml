---

- name : USAP CISCO 2960X SWITCH IOS UPGRADE
  connection: network_cli
  hosts: austx-2960x-sw01
  gather_facts: false

  vars:
    switch:
        #ios_2960XR_FPD_model: "WS-C2960XR-48FPD-L"
        #ios_2960X_FPD_model: "WS-C2960X-48FPD-L"
        #ios_9300_model:
        ios_version: "15.2(7)E2"
        ios_path: "IOS/"
        ios_archive: "c2960x-universalk9-tar.152-7.E2.tar"
        ios_binary: "c2960x-universalk9-mz.152-7.E2.bin"
        ios_md5: "9d4271dc68544234a36ee438337e8663"
        ios_size_kb: 42000
    ftp_server: '10.7.250.54'
    protocol: 'ftp'
    ftp_user: 'reuben'
    ftp_pass: 'cisco'



  tasks:
    - name: Gather all Switch Hardware facts
      ios_facts:
        gather_subset: hardware
      register: output
      tags:
        - facts
    

 
    - name: Check Boot path
      ios_command:
        commands: 'show boot | i BOOT'
      register: bootvar
      when:
       # - ansible_net_model == "WS-C2960X-48FPD-L"
       # - ansible_net_version != "15.2(2)E7"
        - ansible_net_version != switch['ios_version']
      tags:
        - bootvar

    
    - name: Upgrade Switch To Target Software
      block: 
        - name: Check if IOS is already present on the flash
          ios_command:
            commands: "dir /recursive flash: | include switch['ios_binary']"
          register: dir_flash
          tags:
            - flash


        - name: Check that there is enough space for upload
          assert:
            that:
              - ansible_net_filesystems_info['flash:']['spacefree_kb'] > switch['ios_size_kb']
            fail_msg: 'There is not enough space left on {{ inventory_hostname }} flash'
            success_msg: '{{ inventory_hostname }} has enough space left on flash'
          when:
            - switch['ios_binary'] not in dir_flash.stdout[0]
          tags:
            - flash



        - name: Start Image Copy from FTP Server
          ios_command:
            commands:
              - command: "copy {{ protocol}}://{{ ftp_user }}:{{ ftp_pass }}@{{ ftp_server }}/{{ switch['ios_archive'] }}  flash:/"
                prompt: 'Destination filename \[{{ switch["ios_archive"] }}\]?'
                answer: '{{ switch["ios_archive"] }}'

          when:
            - ansible_net_filesystems_info['flash:']['spacefree_kb'] > switch['ios_size_kb']
            - switch['ios_archive'] not in dir_flash.stdout[0]
            - ansible_net_version != switch['ios_version']
          vars:
            ansible_command_timeout: 1800

          tags:
            - upload

        
        
        - name: Check If IOS is present on the flash
          ios_command:
            commands:  "show flash: | include {{ switch['ios_archive'] }}"
          register: dir_flash
          tags:
            - flash


        - name: Assert that IOS is Present
          assert:
            that:
              - switch['ios_archive'] in dir_flash.stdout[0]
            fail_msg: '{{ switch["ios_archive"]}} was not copied successfully to {{ inventory_hostname }} flash'
            success_msg: '{{ switch["ios_archive"]}} was copied successfully to {{ inventory_hostname }} flash'
          tags:
            - flash



        - name: Check MD5 Hash
          ios_command:
            commands:
              - command: "verify /md5 flash:{{ switch['ios_archive'] }}"
          register: md5_result
          vars:
            ansible_command_timeout: 300
          when: 
            - switch['ios_archive'] in dir_flash.stdout[0]
          tags:
            - md5


        - name: Assert That MD5 Sums are Identical
          assert:
            that:
              - switch['ios_md5'] in md5_result.stdout[0]
            fail_msg: 'IOS file MD5sum on {{ inventory_hostname }} is not correct'
            success_msg: 'IOS file MD5sum on {{ inventory_hostname }} is correct'
          tags:
            - md5


        - name: Change the boot image to the new version
          ios_command:
            commands: archive download-sw /leave-old-sw /no-set-boot flash:{{ switch['ios_archive'] }}
          when: switch['ios_md5'] in md5_result.stdout[0]
          vars:
            ansible_command_timeout: 4200
          tags:
            - boot
     
      when:
        - ansible_net_version != switch['ios_version']
        - switch['ios_binary'] not in bootvar.stdout[0]

    - name: Check Boot Path
      ios_command:
        commands: 'show boot | i BOOT'
      register: bootvar
     # when: 
     #   - switch['ios_binary'] not in bootvar.stdout[0]
      tags:
        - bootvar


    - debug:
         msg: ' {{ inventory_hostname }} boot system is  {{ bootvar.stdout[0] }}'
        
    - name: Assert That the boot path is set to the new IOS
      assert:
        that:
          - switch['ios_binary'] in bootvar.stdout[0] 
        fail_msg: 'Boot path is not set to new image on {{ inventory_hostname }}'
        success_msg: 'Boot path is set to new image on {{ inventory_hostname}} reload device to upgrade to target IOS version'
      when:
        - ansible_net_version != switch['ios_version']  
      tags:
        - bootvar  
        
        
